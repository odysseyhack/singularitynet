# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import oracle_pb2 as oracle__pb2


class MeterStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.MeterPushData = channel.unary_unary(
        '/Meter/MeterPushData',
        request_serializer=oracle__pb2.MeterPushDataRequest.SerializeToString,
        response_deserializer=oracle__pb2.Reply.FromString,
        )


class MeterServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def MeterPushData(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_MeterServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'MeterPushData': grpc.unary_unary_rpc_method_handler(
          servicer.MeterPushData,
          request_deserializer=oracle__pb2.MeterPushDataRequest.FromString,
          response_serializer=oracle__pb2.Reply.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'Meter', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class ForecasterStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.ForecasterPushData = channel.unary_unary(
        '/Forecaster/ForecasterPushData',
        request_serializer=oracle__pb2.ForecasterPushDataRequest.SerializeToString,
        response_deserializer=oracle__pb2.Reply.FromString,
        )


class ForecasterServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def ForecasterPushData(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_ForecasterServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'ForecasterPushData': grpc.unary_unary_rpc_method_handler(
          servicer.ForecasterPushData,
          request_deserializer=oracle__pb2.ForecasterPushDataRequest.FromString,
          response_serializer=oracle__pb2.Reply.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'Forecaster', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class CarbonStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.CarbonPushData = channel.unary_unary(
        '/Carbon/CarbonPushData',
        request_serializer=oracle__pb2.CarbonPushDataRequest.SerializeToString,
        response_deserializer=oracle__pb2.Reply.FromString,
        )


class CarbonServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def CarbonPushData(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_CarbonServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'CarbonPushData': grpc.unary_unary_rpc_method_handler(
          servicer.CarbonPushData,
          request_deserializer=oracle__pb2.CarbonPushDataRequest.FromString,
          response_serializer=oracle__pb2.Reply.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'Carbon', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
